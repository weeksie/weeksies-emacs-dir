
;; SETTING THIS FIRST IN CASE THERE ARE ERRORS 
;; LOADING THE REST OF THE FILE

;;automatically open Preferences.el
(defun open-preferences ()
  (interactive)
  (find-file "~/Library/Preferences/Aquamacs Emacs/Preferences.el"))
(global-set-key "\C-p" 'open-preferences)


(add-to-list 'load-path "~/.emacs.d/")
(normal-top-level-add-to-load-path '("apel"))

;(load "path-util")

;;;; Save buffer sessions
(desktop-save-mode 1)
(setq desktop-dirname "~/")
(setq history-length 250)
(add-to-list 'desktop-globals-to-save 'file-name-history)


(setq-default abbrev-mode t)
(cond ((file-exists-p "~/Library/Preferences/Aquamacs Emacs/abbrev_defs")
       (read-abbrev-file "~/Library/Preferences/Aquamacs Emacs/abbrev_defs")))
(setq abbrev-file-name "~/Library/Preferences/Aquamacs Emacs/abbrev_defs")
(setq save-abbrevs t)

;;;; IDO mode for textmate style fuzzy matching
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t)

;;;; YASnippets
(add-to-list 'load-path "~/Library/Preferences/Aquamacs Emacs/yasnippet")
(require 'yasnippet)
(yas/load-directory "~/Library/Preferences/Aquamacs Emacs/yasnippet/snippets")
(setq yas/trigger-key (kbd "<C-M-return>"))


;;;;LAYOUT
(require 'tabbar)
(tabbar-mode t)

;;;;General editing (require pair mode)
(require 'pair-mode)
(pair-mode)


(split-window-vertically)
(split-window-horizontally)
(set-frame-position (selected-frame) 350 30)
(set-frame-size (selected-frame) 205 75)
(enlarge-window 20)
(setq indent-tabs-mode nil)
(tool-bar-mode -1)

;;;;; AQUAMACS SPECIFIC SETTINGS
(setq browse-url-browser-function 'browse-url-safari)


;(require 'path-util)
(autoload 'flyspell-mode "flyspell" "spellchecker" t)

(defun browse-url-safari (url &optional new-window)
  "Open URL in a new Safari window."
  (interactive (browse-url-interactive-arg "URL: "))
  (unless
      (string= ""
	       (shell-command-to-string
		(concat "open -a Safari " url)))
    (message "Starting Safari...")
    (start-process (concat "open -a Safari " url) nil "open -a Safari " url)
    (message "Starting Safari... done")))

(defun report-emacs-bug-externally-p () t)

(setq mac-command-modifier 'meta)
(cua-mode 0)
(transient-mark-mode 1)

;;;; PSVN

;(require 'psvn)

;;;; PHP MODE
(require 'php-mode)
(defun php-app-log-fnord ()
  (interactive)
  (princ "app_log('FNORD','FNORD');" (current-buffer)))

(defun php-app-log-debug ()
  (interactive)
  (princ "app_log('debug'," (current-buffer))
  (save-excursion (princ ");" (current-buffer))))

(define-key php-mode-map "\C-c\C-m" 'php-app-log-fnord)
(define-key php-mode-map "\C-c\C-d" 'php-app-log-debug)



;; ;;;;LISP MODE (SLIME)
;; (add-to-list 'load-path "/usr/local/slime")
;; (require 'slime)
;; (add-hook 'lisp-mode-hook (lambda () (slime-mode t)))
;; (add-hook 'inferior-lisp-mode-hook (lambda () (inferior-slime-mode t)))
;; (setq inferior-lisp-program "openmcl") 
;; ;;(setq inferior-lisp-program "/usr/bin/openmcl") 
;; (setq common-lisp-hyperspec-root
;;       "file:///usr/local/hyperspec/")
;; (setq font-lock-maximum-decoration t)
      
;;(setq default-frame-alist '((font . "-*-ProFont-*-90-*")))
;;(setq tex-dvi-view-command "xdvi")

;;;; GTD MODE

(require 'org)
(setq auto-mode-alist
      (append '(("\\.org$" . org-mode)) auto-mode-alist))
(defun gtd ()
  (interactive)
  (find-file "~/Documents/GTD.org"))

;;;; LATEX MODE
(require 'latex)
(defun latex-para ()
  (interactive)
  (progn
    (newline)
    (princ "\\paragraph{}" (current-buffer))
    (newline)))


(defun latex-compile-and-load ()
  (interactive)
  (let ((fname 
	 (concat 
	  (file-name-sans-extension (expand-file-name (buffer-name)))))
;	(pdflatex (concat "pdflatex " (expand-file-name (buffer-name)))))    
	(pdflatex (concat "xelatex  " (expand-file-name (buffer-name)))))    
    (progn
      (shell-command pdflatex)
      ; run second time to generate any TOC data
      ;(shell-command pdflatex)
      (shell-command (concat "open " fname ".pdf"))
      ; remove all the intermediate files generated by pdflatex
      (shell-command (concat "rm " fname ".{out,log,dvi,toc,lot,lof,aux}")))))

(defun latex-insert-circumflect-o ()
  (interactive)
  (princ"\\^{o}" (current-buffer)))



(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(put 'LaTeX-mode 'flyspell-mode-predicate 'tex-mode-flyspell)

(define-key LaTeX-mode-map (kbd "C-<return>") 'latex-para)
(define-key LaTeX-mode-map "\C-c\C-c" 'latex-compile-and-load)
(define-key LaTeX-mode-map "\M-o" 'latex-insert-circumflect-o)

;;;; ANGEFTP
(setq ange-ftp-ftp-program-name "nftp.pl")

;;;; COMINT SHELL ADJUSTMENTS FOR THE MAC
(add-hook 'comint-mode-hook
	  (lambda ()
	    (make-local-variable 'process-connection-type)
	    (setq process-connection-type t)))

;; Courtesy of snarfed.org --- EMACS AUTOSAVE
;; Put autosave files (ie #foo#) in one place, *not* scattered all over the
;; file system! (The make-autosave-file-name function is invoked to determine
;; the filename of an autosave file.)
;;(defvar autosave-dir 
;;  (concat "/tmp/emacs_autosaves/" (user-login-name) "/"))
;;(make-directory autosave-dir t)
;; (defun auto-save-file-name-p (filename) 
;;   (string-match "^#.*#$" (file-name-nondirectory filename)))
(auto-save-mode nil)
;; (defun make-auto-save-file-name () 
;;   (concat autosave-dir 
;; 	  (if buffer-file-name 
;; 	      (concat "#" (file-name-nondirectory buffer-file-name) "#") 
;; 	    (expand-file-name (concat "#%" (buffer-name) "#")))))

;; Put backup files (ie foo~) in one place too. (The backup-directory-alist 
;; list contains regexp=>directory mappings; filenames matching a regexp are 
;; backed up in the corresponding directory. Emacs will mkdir it if necessary.) 
(defvar backup-dir 
  (concat "/tmp/emacs_backups/" (user-login-name) "/")) 
(setq backup-directory-alist (list (cons "." backup-dir)))

;;;; OBJC MODE
(setq auto-mode-alist
      (append '(("\\.m$" . objc-mode)) auto-mode-alist))


;;;;C MODE
(require 'cc-mode)

(defun c-compile-current-buffer ()
  (interactive)
  (compile (concat "gcc " (buffer-name))))

(defun c-electric-ret (arg)
  (interactive "P")
  (newline)
  (c-indent-line))

;; Calls extconf.rb to compile a ruby extension written in c.
;; a file named extconf.rb must exist in the current directory.
(defun c-ruby-ext-compile ()
  (interactive)
  (shell-command 
   "export PATH=$PATH:/usr/local/bin;ruby extconf.rb && make clean && make"))


(define-key c-mode-map "\C-c\C-c" 'c-compile-current-buffer)
(define-key c-mode-map "\r" 'c-electric-ret)
(define-key c-mode-map "\C-c\C-r" 'c-ruby-ext-compile)

;;;; FANCY CHARS MIGHT NOT WORK WITH PROFONT
(defun unicode-symbol (name)
    "Translate a symbolic name for a Unicode character -- e.g., LEFT-ARROW
  or GREATER-THAN into an actual Unicode character code. "
    (decode-char 'ucs (case name
                        ;; arrows
                        ('left-arrow 8592)
                        ('up-arrow 8593)
                        ('right-arrow 8594)
                        ('down-arrow 8595)
  
                        ;; boxes
                        ('double-vertical-bar #X2551)
                        
                        ;; relational operators
                        ('equal #X003d)
                        ('not-equal #X2260)
                        ('identical #X2261)
                        ('not-identical #X2262)
                        ('less-than #X003c)
                        ('greater-than #X003e)
                        ('less-than-or-equal-to #X2264)
                        ('greater-than-or-equal-to #X2265)
  
                        ;; logical operators
                        ('logical-and #X2227)
                        ('logical-or #X2228)
                        ('logical-neg #X00AC)
  
                        ;; misc
                        ('nil #X2205)
                        ('horizontal-ellipsis #X2026)
                        ('double-exclamation #X203C)
                        ('prime #X2032)
                        ('double-prime #X2033)
                        ('for-all #X2200)
                        ('there-exists #X2203)
                        ('element-of #X2208)
  
                        ;; mathematical operators
                        ('square-root #X221A)
                        ('squared #X00B2)
                        ('cubed #X00B3)
  
                        ;; letters
                        ('lambda #X03BB)
                        ('alpha #X03B1)
                        ('beta #X03B2)
                        ('gamma #X03B3)
                        ('delta #X03B4))))
                        
  (defun substitute-pattern-with-unicode (pattern symbol)
    "Add a font lock hook to replace the matched part of PATTERN with the 
  Unicode symbol SYMBOL looked up with UNICODE-SYMBOL."
    (interactive)
    (font-lock-add-keywords
     nil `((,pattern (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                              ,(unicode-symbol symbol))
                              nil))))))
  
  (defun substitute-patterns-with-unicode (patterns)
    "Call SUBSTITUTE-PATTERN-WITH-UNICODE repeatedly."
    (mapcar #'(lambda (x)
                (substitute-pattern-with-unicode (car x)
                                                 (cdr x)))
            patterns))


;;;;RUBY MODE
;; (add-to-list 'load-path "~/.emacs-modes")
(require 'ruby-mode)
(add-hook 'ruby-mode-user-hook 'turn-on-font-lock)
(add-hook 'ruby-mode-hook 'pair-mode)
(add-hook 'ruby-mode-hook 'yas/minor-mode-on)

(defun ruby-eval-buffer () (interactive)
   "Evaluate the buffer with ruby."
   (shell-command-on-region (point-min) (point-max) "/usr/bin/ruby -W0"))

(defun ruby-electric-space (arg)
  (interactive "P")
  (self-insert-command (prefix-numeric-value arg))
  (save-excursion
    (cond ((is-alone-on-line "\\(def\\|if\\|class\\)")
         (progn
           (ruby-indent-line t)
           (newline)
           (ruby-insert-end))))))

(defun is-alone-on-line (kw)
  (interactive "P")
  (let* (
      (rx1 (concat kw "[[:space:]]$"))
      (rx2 (concat "[[:space:]]*" rx1)))
      (save-excursion
        (forward-word -1)
        (and (looking-at rx1)
             (progn
             (beginning-of-line)
             (looking-at rx2))))))


(defun ruby-electric-ret (arg)
  (interactive "P")
  (newline)
  (ruby-indent-line t))

(defun ruby-deploy-server ()
  "Calls Rakefile in server directory"
  (interactive)
  (shell-command 
   "export PATH=$PATH:/usr/local/bin;cd /Users/weeksie/workspace/twelvestone/src/server;rake install"))



(autoload 'run-ruby "/usr/local/bin/ruby")

(setq auto-mode-alist
      (append '(("\\.r[bs]$" . ruby-mode)) auto-mode-alist))

(setq auto-mode-alist
      (append '(("Rakefile$" . ruby-mode)) auto-mode-alist))

(setq interpreter-mode-alist (append '(("ruby" . ruby-mode))
				     interpreter-mode-alist))
 
(define-key ruby-mode-map "\C-c\C-c" 'ruby-eval-buffer)
(define-key ruby-mode-map " " 'ruby-electric-space)
(define-key ruby-mode-map "\r" 'ruby-electric-ret)
(define-key ruby-mode-map "\C-c\C-w" 'ruby-deploy-server)
;; (define-key ruby-mode-map [C-up] 'ruby-backward-sexp)
;; (define-key ruby-mode-map [C-down] 'ruby-forward-sexp)


;;;; REDCLOTH
(require 'redcloth-mode)
(setq auto-mode-alist
      (append '(("\\.blog" . redcloth-mode)) auto-mode-alist))
(setq auto-mode-alist
      (append '(("\\.redcloth" . redcloth-mode)) auto-mode-alist))
(setq auto-mode-alist
      (append '(("\\.textile" . redcloth-mode)) auto-mode-alist))





;; ;;;; HASKELL MODE
;; (add-to-list 'load-path "~/.emacs.d/haskell-mode-2.1")
;; (require 'haskell-mode)
;; (require 'haskell-ghci)
;; (setq auto-mode-alist
;;       (append '(("\\.hs$" . haskell-mode)) auto-mode-alist))

;; ;(setq haskell-hugs-program-name "/usr/local/bin/ghci")
;; ;(setq haskell-hugs-program-name "/usr/local/bin/hugs")


;; ;; If I ever find a version of ProFont that supports Unicode 
;; ;; then this is the waaaay to go.
;; (defun haskell-unicode ()
;;     (interactive)
;;     (substitute-patterns-with-unicode
;;      (list (cons "\\(<-\\)" 'left-arrow)
;;            (cons "\\(->\\)" 'right-arrow)
;;            (cons "\\(==\\)" 'identical)
;;            (cons "\\(/=\\)" 'not-identical)
;;            (cons "\\(()\\)" 'nil)
;;            (cons "\\(\\\\\\)" 'lambda)
;;            (cons "\\<\\(sqrt\\)\\>" 'square-root)
;;            (cons "\\(&&\\)" 'logical-and)
;;            (cons "\\(||\\)" 'logical-or)
;;            (cons "\\<\\(not\\)\\>" 'logical-neg)
;;            (cons "\\(>\\)\\[^=\\]" 'greater-than)
;;            (cons "\\(<\\)\\[^=\\]" 'less-than)
;;            (cons "\\(>=\\)" 'greater-than-or-equal-to)
;;            (cons "\\(<=\\)" 'less-than-or-equal-to)
;;            (cons "\\<\\(alpha\\)\\>" 'alpha)
;;            (cons "\\<\\(beta\\)\\>" 'beta)
;;            (cons "\\<\\(gamma\\)\\>" 'gamma)
;;            (cons "\\<\\(delta\\)\\>" 'delta)
;;            (cons "\\(''\\)" 'double-prime)
;;            (cons "\\('\\)" 'prime)
;;            (cons "\\(!!\\)" 'double-exclamation)
;;            (cons "\\(\\.\\.\\)" 'horizontal-ellipsis))))


;; (defun haskell-fill-comment ()
;;   (interactive)
;;   (save-excursion
;;     (fill-line-with "-" fill-column)))


;; ;(add-hook 'haskell-mode-hook 'haskell-unicode)

;; (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
;; (add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
;; (add-hook 'haskell-mode-hook 'turn-on-haskell-ghci)

;; (define-key haskell-mode-map (kbd "C-M--") 'haskell-fill-comment)
;; (define-key haskell-mode-map (kbd "M--") 'comment-region)
;; (define-key haskell-mode-map (kbd "M-_") 'uncomment-region)

;; ;; sub- haskell binscript mode
;; (require 'binscript-mode)
;; (setq auto-mode-alist
;;       (append '(("\\.binscript$" . binscript-mode)) auto-mode-alist))


;; ;;;; ERLANG MODE
;; (require 'erlang)
;; (setq auto-mode-alist
;;       (append '(("\\.erl$" . erlang-mode)) auto-mode-alist))
;; (setq inferior-erlang-machine "/usr/local/bin/erl")
;; ;; overrides this function in erlang.el
;; (defun inferior-erlang-run-or-select ()
;;   "Switch to an inferior Erlang buffer, possibly starting new process."
;;   (interactive)
;;   (if (null (inferior-erlang-running-p))
;;       (inferior-erlang))
;;   (inferior-erlang-display-buffer t))

;; (defun erlang-emit-arrow (&optional arg) 
;;   (interactive)
;;   (princ "->" (current-buffer)))

;; (defun erlang-fill-comment ()
;;   (interactive)
;;   (save-excursion
;;     (fill-line-with "%" fill-column)))

;; (defun erlang-return-indent ()
;;   (interactive)
;;   (newline)
;;   (indent-according-to-mode))

;; ;; (defun run-rake (cmd &optional rake-root)
;; ;;   (let ((rr (if rake-root rake-root "..")))
;; ;;     (progn
;; ;;       (cmd-set-cwd rr)
;; ;;       (shell-command (concat "rake " cmd)))))

;; ;; (defun erlang-run-rake-tests ()
;; ;;   (interactive)
;; ;;   (run-rake "erl:test"))

;; (erlang-keymap-init)

;; (setq erlang-root-dir "/usr/local/lib/erlang")
;; (define-key erlang-mode-map (kbd "C--") 'erlang-emit-arrow)
;; (define-key erlang-mode-map (kbd "C-M--") 'erlang-fill-comment)
;; (define-key erlang-mode-map (kbd "M--") 'comment-region)
;; (define-key erlang-mode-map (kbd "M-_") 'uncomment-region)
;; (define-key erlang-mode-map (kbd "<return>") 'erlang-return-indent)


;; ;;;; Actionscript mode
;; (require 'actionscript-mode)
;; (setq auto-mode-alist
;;       (append '(("\\.as$" . actionscript-mode)) auto-mode-alist))



;;;; LUA MODE
(require 'lua-mode)
(setq auto-mode-alist
      (append '(("\\.lua$" . lua-mode)) auto-mode-alist))

(add-hook 'lua-mode-hook 'pair-mode)
(add-hook 'lua-mode-hook 'yas/minor-mode-on)


(setq interpreter-mode-alist (append '(("lua" . lua-mode))
    				     interpreter-mode-alist))

;; ;;;;XUL/Javascript
(autoload 'js2-mode "js2" nil t)

(setq auto-mode-alist
      (append '(("\\.js$" . js2-mode)) auto-mode-alist))

;; ;; (add-hook 'javascript-mode-hook
;; ;;           '(lambda () 
;; ;; 	     (setq hilit-mode-enable-list  '(not text-mode)
;; ;; 		   hilit-background-mode   'light
;; ;; 		   hilit-inhibit-hooks     nil
;; ;; 		   hilit-inhibit-rebinding nil)
;; ;; 	     (require 'hilit19)))

;; (defun js-emit-load-fun ()
;;   (interactive)
;;   (indent-according-to-mode)
;;   (princ "load_" (current-buffer))
;;   (save-excursion
;;     (princ ": function(widget) {" (current-buffer))
;;     (newline 2)
;;     (princ "}" (current-buffer)))
;;   (save-excursion
;;     (next-line)
;;     (indent-according-to-mode)
;;     (next-line)
;;     (indent-according-to-mode)))
    


;; (define-key javascript-mode-map "\C-l\C-l" 'js-emit-load-fun)


;; ;;;;SQL MODE
;; (require 'sql)
;; (defun sql-electric-ret ()
;;   (interactive)
;;   (progn
;;     (newline)
;;     (indent-according-to-mode)))


;; (defun sql-integer-not-null ()
;;   (interactive)
;;   (progn
;;     (princ " INTEGER NOT NULL" (current-buffer))
;;     (sql-electric-ret)
;;     (princ ", " (current-buffer))))

;; (defun sql-create-table ()
;;   (interactive)
;;   (progn
;;     (princ "CREATE TABLE " (current-buffer))
;;     (save-excursion 
;;       (princ " (" (current-buffer))
;;       (newline)
;;       (princ ");" (current-buffer)))))

;; (defun sql-insert-utf8 ()
;;   (interactive)
;;   (princ " CHARACTER SET utf8" (current-buffer)))

;; (define-key sql-mode-map "\r" 'sql-electric-ret)
;; (define-key sql-mode-map "\C-n\C-n" 'sql-integer-not-null)
;; (define-key sql-mode-map "\C-u\C-u" 'sql-insert-utf8)
;; (define-key sql-mode-map "\C-c-k" 'sql-create-table)


;;;; SGML/XML/HTML/RHTML MODE
(require 'sgml-mode)
(setq auto-mode-alist
      (append '(("\\.rhtml" . sgml)) auto-mode-alist))
(setq auto-mode-alist
      (append '(("\\.rsp" . sgml)) auto-mode-alist))
(setq auto-mode-alist
      (append '(("\\.html" . sgml)) auto-mode-alist))


(defun sgml-preprocessor-tag ()
  (interactive)
  (princ "<%" (current-buffer))
  (save-excursion
    (princ " %>" (current-buffer))))


(defun sgml-fill-comment ()
  (interactive)
  (save-excursion
    (fill-line-with "*" fill-column)
    (delete-char -4)
    (princ " -->" (current-buffer))))

(defun sgml-clear-div ()
  (interactive)
  (progn
   (princ "<div class=\"clear-all\">&nbsp;</div>" 
	  (current-buffer))
   (newline)))

(defun sgml-electric-br ()
  (interactive)
  (progn
    (newline)
    (princ "<br />" (current-buffer))
    (newline)))

(defun sgml-php-msg ()
  (interactive)
  (progn
    (princ "<?=msg(\"" (current-buffer))
    (save-excursion
      (princ "\")?>" (current-buffer)))))

(defun c-fill-comment ()
  (interactive)
  (save-excursion
    (fill-line-with "*" fill-column)
    (delete-char -1)
    (princ "/" (current-buffer))))


(defun sgml-electric-close-tag () 
  "Automatically closes a tag"
  (interactive)
  (princ ">"  (current-buffer))
  (unless (or (char-is-at -2 "/") 
	      (char-is-at -2 "%") 
	      (char-is-at -2 "-") 
	      (char-is-at -2 "="))
      (save-excursion
	(sgml-close-tag))))

(defun sgml-electric-complete ()
  "Automatically completes a closing tag"
  (interactive)
  (princ "/" (current-buffer))
  (if (char-is-at -2 "<")
    (progn
      (delete-char -2)
      (sgml-close-tag))))
(defun sgml-electric-indent-line ()
  "Puts cursor on newline and automatically indents 
  tag if necessary"
  (interactive)
  (if (and (char-is-at -1 ">") (char-is-at 0 "<"))
      (progn
	(newline 2) 
	(sgml-indent-line)
	(forward-line -1)
	(sgml-indent-line))
    (progn
      (newline)
      (sgml-indent-line))))

(defun char-is-at (location char)
  (save-excursion
    (forward-char location)
    (looking-at char)))


(define-key sgml-mode-map ">" 'sgml-electric-close-tag)
(define-key sgml-mode-map "/" 'sgml-electric-complete)
(define-key sgml-mode-map "\r" 'sgml-electric-indent-line)
(define-key sgml-mode-map (kbd "C-M--") 'sgml-fill-comment)
(define-key sgml-mode-map (kbd "C-<return>") 'sgml-electric-br)
(define-key sgml-mode-map (kbd "C-c C-c") 'sgml-clear-div)
(define-key sgml-mode-map (kbd "C-c C-q") 'sgml-preprocessor-tag)
(define-key sgml-mode-map (kbd "C-c m") 'sgml-php-msg)


(add-to-list 'load-path "~/Library/Preferences/Aquamacs Emacs/mmm-mode")
(require 'mmm-mode)
(require 'mmm-auto)
(autoload 'css-mode "css-mode")
(add-to-list 'auto-mode-alist '("\\.css\\'" . css-mode))
(setq cssm-indent-function #'cssm-c-style-indenter)
(setq cssm-indent-level '2)
(setq mmm-global-mode 'maybe)

(mmm-add-classes
 '((erb-code
    :submode ruby-mode
    :match-face (("<%#" . mmm-comment-submode-face)
                 ("<%=" . mmm-output-submode-face)
                 ("<%"  . mmm-code-submode-face))
    :front "<%[#=]?" 
    :back "-?%>" 
    :insert ((?% erb-code       nil @ "<%"  @ " " _ " " @ "%>" @)
             (?# erb-comment    nil @ "<%#" @ " " _ " " @ "%>" @)
             (?= erb-expression nil @ "<%=" @ " " _ " " @ "%>" @))
    )))
(add-hook 'html-mode-hook
          (lambda ()
            (setq mmm-classes '(erb-code))
            (mmm-mode-on)))

;; What files to invoke the new html-mode for?
(add-to-list 'auto-mode-alist '("\\.inc\\'" . html-mode))
(add-to-list 'auto-mode-alist '("\\.rhtml\\'" . html-mode))
(add-to-list 'auto-mode-alist '("\\.rxml\\'" . html-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . html-mode))
(add-to-list 'auto-mode-alist '("\\.jsp\\'" . html-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . html-mode))
;;
;; What features should be turned on in this html-mode?
(add-to-list 'mmm-mode-ext-classes-alist '(html-mode nil html-js))
(add-to-list 'mmm-mode-ext-classes-alist '(html-mode nil embedded-css))
(add-to-list 'mmm-mode-ext-classes-alist '(html-mode nil fancy-html))
(setq mmm-submode-decoration-level 1)


;; ;;;; Blog mode
;; ;;(require 'blog-mode)
;; ;;(add-to-list 'auto-mode-alist '("\\.blog$" . blog-mode)) 


;; ;;;;; Scheme mode
;; (require 'cmuscheme)
;; (require 'quack)
;; ; Autoload run-scheme from file cmuscheme.el
;; (autoload 'run-scheme "cmuscheme"
;;   "Run an inferior Scheme process."
;;   t)

;;  ; Files ending in ".scm" are Scheme source, 
;;  ; so put their buffers in scheme-mode.
;;  (setq auto-mode-alist 
;;        (cons '("\\.scm$" . scheme-mode)  
;;              auto-mode-alist))

;; ;; Define C-c t to run my favorite command in inferior scheme mode:
;; ;; (setq cmuscheme-load-hook
;; ;;       '((lambda () (define-key inferior-scheme-mode-map "\C-ct"
;; ;; 		     'favorite-cmd))))



;; ;;;;;;; Blog mode






;;;;ECLIPSE STYLE TEXT SHOVING AROUND STUFF
(defun kill-current-line ()
  "An abbreviated method for killing a whole line plus the newline terminal"
  (kill-region (line-beginning-position) (+ (line-end-position) 1)))

(defun copy-current-line ()
  "Similar to the above but copy the text rather than cut it"
  (copy-region-as-kill (line-beginning-position) (+ (line-end-position) 1)))

(defun kill-yank (n)
  (kill-current-line) ;grab current line of text
  (forward-line n)
  (beginning-of-line)
  (yank)
  (forward-line -1)   ;move back to the beginning of the yanked text
  (beginning-of-line))

(defun kill-yank-region (start end n)
  (let ((lines (count-lines start end)))
    (goto-char start)
    (beginning-of-line)
    (kill-line lines))
  (progn
    (forward-line n)
    (yank)
    (if (> 0 n)
	(exchange-point-and-mark))
    (setq deactivate-mark nil)))

(defun copy-yank (n)
  (copy-current-line)
  (forward-line n)
  (beginning-of-line)
  (yank)
  (forward-line -1)
  (beginning-of-line))

(defun kill-yank-up () 
  (interactive)
  (if mark-active
      (kill-yank-region (region-beginning) (region-end) -1)
    (kill-yank -1)))

(defun kill-yank-down ()
  (interactive)
  (if mark-active
      (kill-yank-region (region-beginning) (region-end) 1)
    (kill-yank 1)))


(defun copy-yank-up ()
  (interactive)
  (copy-yank 0))

(defun copy-yank-down ()
  (interactive)
  (copy-yank 1))


(defun auto-indent-line () 
  (interactive)
  (newline)
  (indent-according-to-mode))

;; fills the current line out with a passed character
;; to a maximum of len and then truncates it.
(defun fill-line-with (ch len)
  (if (< (current-column) (+ len 1))
      ;; emit ch and recurse
      (progn 
	(princ ch (current-buffer))
	(fill-line-with ch len))
    ;; trim any extra chars off the end
    (progn
      (backward-char)
      (kill-line))))

(defun snepo-electric-brace () 
  (interactive)
  (snepo-surround "{" "}"))

(defun snepo-electric-close-brace ()
  (interactive)
  (snepo-check-and-close "}"))

(defun snepo-electric-bracket () 
  (interactive)
  (snepo-surround "[" "]"))

(defun snepo-electric-close-bracket ()
  (interactive)
  (snepo-check-and-close "]"))

(defun snepo-electric-paren () 
  (interactive)
  (snepo-surround "(" ")"))

(defun snepo-electric-close-paren ()
  (interactive)
  (snepo-check-and-close ")"))

(defun snepo-electric-quote () 
  (interactive)
  (if (looking-at "\"") 
      (forward-char 1) 
    (progn
      (snepo-surround "\"" "\""))))

(defun snepo-electric-delete ()
  (interactive)
  (if (or
       (snepo-between "\\[" "\\]")
       (snepo-between "{" "}")
       (snepo-between "(" ")")
       (snepo-between "\"" "\""))
	(progn
	  (forward-char 1)
	  (delete-char -2))
    (backward-delete-char 1)))  



(defmacro snepo-surround-with-function (left right)   
  "Returns a function which, when called, will interactively
wrap-region-or-insert using left and right."
  `(lambda () 
     (interactive) 
     (snepo-surround ,left ,right)))

(defun snepo-surround (x y)
  (interactive)
  (if (and mark-active transient-mark-mode)
      (save-excursion
	(goto-char (region-beginning))
	(insert x)
	(goto-char (+ (region-end) (length y)))
	(if (looking-at "\n") (forward-char -1))
	(insert y))
    (princ x (current-buffer))
    (unless (or (looking-at y) (looking-at "\\w"))
      (save-excursion (princ y (current-buffer))))))

(defun snepo-between (x y)
  (and (char-is-at -1 x)
       (looking-at y)))
	    
(defun snepo-check-and-close (x)
  (if (looking-at x)
      (forward-char 1)
    (princ x (current-buffer))))

(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME." 
  (interactive "sNew name: ")
  (let ((name (buffer-name))
	(filename (buffer-file-name)))
    (if (not filename)
	(message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
	  (message "A buffer named '%s' already exists!" new-name)
	(progn 	 
	  (rename-file name new-name 1) 	
	  (rename-buffer new-name)
	  (set-visited-file-name new-name)
	  (set-buffer-modified-p nil)))))) 

(defun move-buffer-file (dir)
 "Moves both current buffer and file it's visiting to DIR." 
 (interactive "DNew directory: ")
 (let* ((name (buffer-name))
	(filename (buffer-file-name))
	(dir
	 (if (string-match dir "\\(?:/\\|\\\\)$")
	     (substring dir 0 -1) dir))
	(newname (concat dir "/" name)))
   
   (if (not filename)
       (message "Buffer '%s' is not visiting a file!" name)
     (progn 	
       (copy-file filename newname 1)
       (delete-file filename)
       (set-visited-file-name newname)
       (set-buffer-modified-p nil) t))))



(global-set-key [M-up] 'kill-yank-up)
(global-set-key [M-down] 'kill-yank-down)

;; for aquamacs
(define-key osx-key-mode-map [M-up] 'kill-yank-up)
(define-key osx-key-mode-map [M-down] 'kill-yank-down)

(global-set-key [C-M-up] 'copy-yank-up)
(global-set-key [C-M-down] 'copy-yank-down)

(global-set-key [kp-delete] 'delete-char)
(global-set-key [C-kp-delete] 'kill-word)


(global-set-key (kbd "M--") 'comment-region)
(global-set-key (kbd "M-_") 'uncomment-region)


(global-set-key "\r" 'auto-indent-line)

(setq x-select-enable-clipboard t)

(global-set-key "\C-y" 'clipboard-yank)
(global-set-key "\C-w" 'backward-kill-word)
(global-set-key "\M-w" 'clipboard-kill-ring-save)
(global-set-key "\C-x\C-l" nil)

(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)


(global-set-key "\C-x\C-k" 'kill-region)
(global-set-key "\C-c\C-k" 'kill-region)

;; pair mode does this, y'know
;; (global-set-key "[" 'snepo-electric-bracket)
;; (global-set-key "]" 'snepo-electric-close-bracket)
;; (global-set-key "{" 'snepo-electric-brace)
;; (global-set-key "}" 'snepo-electric-close-brace)
;; (global-set-key "(" 'snepo-electric-paren)
;; (global-set-key ")" 'snepo-electric-close-paren)
;; (global-set-key "\"" 'snepo-electric-quote)
;; ;(global-set-key "'" 'snepo-electric-prime)
;; (global-set-key [backspace] 'snepo-electric-delete)

(global-set-key "\C-x\C-a" 'align-regexp)


; keeps me from minimising the fucking window on
; accident all the time.
(global-set-key "\C-z" 'save-buffer)
(global-set-key "\C-x\C-z" 'save-buffer)

(global-set-key "\M- " 'dabbrev-expand)

(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

;;;;KEY SUBSTITUTIONS
;(keyboard-translate ?\) ?\])
;(keyboard-translate ?\( ?\[)
;(keyboard-translate ?\] ?\))
;(keyboard-translate ?\[ ?\()
; this turned out to be a bad idea if I ever start seriously 
; lisp programming then I'll reinstate these for lisp-mode only.

;;:family "apple-profont"
(put 'upcase-region 'disabled 1)





;;;; temp functions

(defun snepo-document-template () 
  (interactive)
  (save-excursion 
    (princ "
\\documentclass{report}
\\usepackage{snepoproposal}
\\begin{document}
\\setlength{\\headsep}{16pt}
\\chead{}\\title{}
\\author{}
\\maketitle
\\tableofcontents
\\chapter{}

\\end{document}
" (current-buffer))))


(defun snepo-itemize (number label)
  (interactive "MItem Number: \nMItem Label: ")
  (princ (concat 
	  "\\item[(" number ")] \\textbf{" label "} ")
	 (current-buffer)))


